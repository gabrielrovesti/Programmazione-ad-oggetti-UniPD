// EX 1
template<class T1, class T2> 
bool fun(T1* p, T2& r) {
return 
  typeid(T1)==typeid(T2) &&
  typeid(*p) == typeid(r) &&
  dynamic_cast<ios*>(p);  
}

// EX 2
class Fallimento {};

long Fun(const ios& s) throw(Fallimento){
    if(s.fail()) throw Fallimento();
    ifstream* p = dynamic_cast<ifstream*>(const_cast<ios*>(&s));
    if(!p) return -2;
    if(!(p->isOpen())) return -1;
    return p->tellg();
}

// EX 3
class Biglietto { 
private: 
  int km;
public:
  virtual double prezzo() const =0;
  Biglietto(int k): km(k) {}
  virtual ~Biglietto() {}
  static double prezzoKm;
  int getKm() const {return km;}
  virtual Biglietto* clone() const=0;
};
double Biglietto::prezzoKm=0.1;

class BigliettoPrima: public Biglietto {
private: 
  static int maggiorazioneKm;
public:
  BigliettoPrima(int k): Biglietto(k) {}
  double prezzo() const {
    return getKm()<maggiorazioneKm ? getKm()*prezzoKm*1.2 : getKm()*prezzoKm*1.3;
  }
  virtual BigliettoPrima* clone() const {
    return new BigliettoPrima(*this);
  }
};
int BigliettoPrima::maggiorazioneKm=100;

class BigliettoSeconda: public Biglietto {
private: 
  bool prenotazione;
public:
  static double costoPrenotazione;
  BigliettoSeconda(int k, bool p=false): Biglietto(k), prenotazione(p) {}
  double prezzo() const {
    return prenotazione ? getKm()*prezzoKm + costoPrenotazione : getKm()*prezzoKm;
  }
  virtual BigliettoSeconda* clone() const {
    return new BigliettoSeconda(*this);
  }
  bool isPrenotazione() const {return prenotazione;}
};
double BigliettoSeconda::costoPrenotazione =5.0;

class BigliettoSmart {
private:
  Biglietto* punt;
public:
  const Biglietto& operator*() const {
    return *punt;
  }
  
  Biglietto& operator*() {
    return *punt;
  }
  
  const Biglietto* operator->() const{
    return punt;
  }
  
  Biglietto* operator->() {
    return punt;
  } 

  BigliettoSmart(Biglietto* p): punt(p) {}
  
  BigliettoSmart(const BigliettoSmart& bs): punt(bs->clone()) {}

  BigliettoSmart& operator=(const BigliettoSmart& bs) {
    if(this != &bs) {
      delete punt; // distruzione virtuale
      punt = bs->clone();
    }
    return *this;
  }

  ~BigliettoSmart() {delete punt;}
};

class TrenoPieno {
private:
  bool prima;
public:
  TrenoPieno(bool b): prima(b) {}
};

class ViaggioTreno {
private:
  vector<BigliettoSmart> venduti;
  int maxPrima;
  int maxSecondaP;
public:
  int* bigliettiVenduti() const {
    int* a = new int[3]; a[0]=0; a[1]=0; a[2]=0;
    vector<BigliettoSmart>::const_iterator it = venduti.begin();
    for( ; it != venduti.end(); ++it) {
      if(dynamic_cast<const BigliettoPrima*>(&(**it))) ++a[0];
      const BigliettoSeconda* p = 
	dynamic_cast<const BigliettoSeconda*>(&(**it));
      if(p) if(p->isPrenotazione()) ++a[1];
	else ++a[2];
    }
    return a;
  }

  void vendiBiglietto(const Biglietto& b) throw(TrenoPieno) {
    int* a = bigliettiVenduti();
    if(dynamic_cast<const BigliettoPrima*>(&b)) 
      if(maxPrima-a[0]>0) 
	venduti.push_back(BigliettoSmart(const_cast<Biglietto*>(&b)));
      else throw TrenoPieno(true);
    
    BigliettoSeconda* p = 
      dynamic_cast<BigliettoSeconda*>(const_cast<Biglietto*>(&b));
    if(p) 
      if(p->isPrenotazione())  
	if(maxSecondaP-a[1]>0) venduti.push_back(BigliettoSmart(p));
	else throw TrenoPieno(false);
      else venduti.push_back(BigliettoSmart(p));
    delete[] a;
  }
  
  double incasso() const {
    double inc=0.0;
    for(vector<BigliettoSmart>::const_iterator it = venduti.begin();
	it != venduti.end(); ++it) 
      inc += (*it)->prezzo();
    return inc;
  }
};