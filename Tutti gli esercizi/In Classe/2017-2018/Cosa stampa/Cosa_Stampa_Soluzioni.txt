#include <iostream>
#include <string>

using namespace std;
class S{
    public:
    string s;
    S(string t): s(t){}
};

class N{
    private:
    S x;
    public:
    N* next;
    N(S t, N* p): x(t), next(p) {cout << "N2 ";}
    ~N() {if(next) delete next; cout << x.s + "~N ";}
};

class C{
    N* pointer;
    public:
    C(): pointer(0){}
    ~C() {delete pointer; cout << "~C()";}
    void F(string t1, string t2="pippo"){
        pointer=new N(S(t1), pointer);
        pointer=new N(t2, pointer);
    }
};

int main(){
    C* p=new C; cout << "UNO\n";
    p->F("pluto", "paperino"); p->F("topolino"); cout << "DUE\n";
    delete p; cout << "TRE\n";
}

STAMPE:
UNO
N2 N2 N2 N2 DUE
pluto~N paperino~N topolino~N pippo~N ~C()TRE



#include <iostream>
#include <string>

using namespace std;
class B{
   public:
   int x;
   B(int z=1): x(z){}
};

class D: public B{
    public:
    int y;
    D(int z=5): B(z-2), y(z){}
};

void fun(B*a, int size){
    for(int i=0; i<size; ++i) cout << (*(a+i)).x << " ";
}

int main(){
    fun(new D[4], 4); cout << "**1\n";
    B* b = new D[4]; fun(b,4); cout << "**2\n";
    b[0]=D(6); b[1]=D(9); fun(b,4); cout << "**3\n";
    b=new B[4]; b[0]=D(6); b[1]=D(9);
    fun(b,4); cout << "**4\n";
}

STAMPE:
3 5 3 5 **1
3 5 3 5 **2
4 7 3 5 **3
4 7 1 1 **4


